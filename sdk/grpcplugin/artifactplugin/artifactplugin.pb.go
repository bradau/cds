// Code generated by protoc-gen-go. DO NOT EDIT.
// source: artifactplugin.proto

package artifactplugin

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ArtifactPluginManifest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Author               string   `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArtifactPluginManifest) Reset()         { *m = ArtifactPluginManifest{} }
func (m *ArtifactPluginManifest) String() string { return proto.CompactTextString(m) }
func (*ArtifactPluginManifest) ProtoMessage()    {}
func (*ArtifactPluginManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_541bc67ec8241269, []int{0}
}

func (m *ArtifactPluginManifest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtifactPluginManifest.Unmarshal(m, b)
}
func (m *ArtifactPluginManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtifactPluginManifest.Marshal(b, m, deterministic)
}
func (m *ArtifactPluginManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtifactPluginManifest.Merge(m, src)
}
func (m *ArtifactPluginManifest) XXX_Size() int {
	return xxx_messageInfo_ArtifactPluginManifest.Size(m)
}
func (m *ArtifactPluginManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtifactPluginManifest.DiscardUnknown(m)
}

var xxx_messageInfo_ArtifactPluginManifest proto.InternalMessageInfo

func (m *ArtifactPluginManifest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ArtifactPluginManifest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ArtifactPluginManifest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ArtifactPluginManifest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type Options struct {
	Options              map[string]string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Options) Reset()         { *m = Options{} }
func (m *Options) String() string { return proto.CompactTextString(m) }
func (*Options) ProtoMessage()    {}
func (*Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_541bc67ec8241269, []int{1}
}

func (m *Options) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Options.Unmarshal(m, b)
}
func (m *Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Options.Marshal(b, m, deterministic)
}
func (m *Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Options.Merge(m, src)
}
func (m *Options) XXX_Size() int {
	return xxx_messageInfo_Options.Size(m)
}
func (m *Options) XXX_DiscardUnknown() {
	xxx_messageInfo_Options.DiscardUnknown(m)
}

var xxx_messageInfo_Options proto.InternalMessageInfo

func (m *Options) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

type Result struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Details              string   `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_541bc67ec8241269, []int{2}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Result) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func init() {
	proto.RegisterType((*ArtifactPluginManifest)(nil), "artifactplugin.ArtifactPluginManifest")
	proto.RegisterType((*Options)(nil), "artifactplugin.Options")
	proto.RegisterMapType((map[string]string)(nil), "artifactplugin.Options.OptionsEntry")
	proto.RegisterType((*Result)(nil), "artifactplugin.Result")
}

func init() { proto.RegisterFile("artifactplugin.proto", fileDescriptor_541bc67ec8241269) }

var fileDescriptor_541bc67ec8241269 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0x96, 0xd2, 0xb2, 0x37, 0x34, 0x4d, 0x66, 0x0a, 0x51, 0xb8, 0x54, 0x11, 0x42, 0xe3,
	0xe2, 0x49, 0xe3, 0x32, 0xf5, 0x30, 0x89, 0x8d, 0x72, 0x02, 0x11, 0xa5, 0xe2, 0xc2, 0xcd, 0x4d,
	0xdc, 0xc4, 0xaa, 0x1b, 0x47, 0xb6, 0x13, 0xd4, 0x1b, 0x17, 0x7e, 0x2d, 0x7f, 0x02, 0xc5, 0x71,
	0xa0, 0x89, 0xe8, 0xa5, 0x3d, 0xc5, 0xef, 0x7d, 0xdf, 0xf7, 0xf4, 0xbe, 0xf7, 0x29, 0x70, 0x4d,
	0xa4, 0x66, 0x6b, 0x92, 0xe8, 0x92, 0x57, 0x19, 0x2b, 0x70, 0x29, 0x85, 0x16, 0xe8, 0xb2, 0xdf,
	0x0d, 0x5e, 0x67, 0x42, 0x64, 0x9c, 0xde, 0x1a, 0x74, 0x55, 0xad, 0x6f, 0xe9, 0xb6, 0xd4, 0xbb,
	0x96, 0x1c, 0xfe, 0x74, 0xc0, 0xfb, 0x60, 0xf9, 0x91, 0xe1, 0x7f, 0x21, 0x05, 0x5b, 0x53, 0xa5,
	0x11, 0x82, 0x71, 0x41, 0xb6, 0xd4, 0x77, 0x66, 0xce, 0xcd, 0x79, 0x6c, 0xde, 0xc8, 0x87, 0x69,
	0x4d, 0xa5, 0x62, 0xa2, 0xf0, 0xcf, 0x4c, 0xbb, 0x2b, 0xd1, 0x0c, 0x2e, 0x52, 0xaa, 0x12, 0xc9,
	0x4a, 0xdd, 0xa0, 0xae, 0x41, 0xf7, 0x5b, 0xc8, 0x83, 0x09, 0xa9, 0x74, 0x2e, 0xa4, 0x3f, 0x36,
	0xa0, 0xad, 0xc2, 0x5f, 0x0e, 0x4c, 0xbf, 0x1a, 0x8a, 0x42, 0x0f, 0x30, 0x15, 0xed, 0xd3, 0x77,
	0x66, 0xee, 0xcd, 0xc5, 0xdd, 0x1b, 0x3c, 0xf0, 0x68, 0x99, 0xdd, 0x77, 0x51, 0x68, 0xb9, 0x8b,
	0x3b, 0x51, 0x30, 0x87, 0x17, 0xfb, 0x00, 0xba, 0x02, 0x77, 0x43, 0x77, 0xd6, 0x42, 0xf3, 0x44,
	0xd7, 0xf0, 0xac, 0x26, 0xbc, 0xa2, 0x76, 0xff, 0xb6, 0x98, 0x9f, 0xdd, 0x3b, 0xe1, 0x1c, 0x26,
	0x31, 0x55, 0x15, 0xd7, 0xcd, 0xa6, 0x4a, 0x13, 0x5d, 0x29, 0x2b, 0xb4, 0x55, 0xe3, 0x3e, 0xa5,
	0x9a, 0x30, 0xae, 0x3a, 0xf7, 0xb6, 0xbc, 0xfb, 0xed, 0xc2, 0x65, 0xff, 0x8c, 0xe8, 0x33, 0x3c,
	0xff, 0x7b, 0x4a, 0x0f, 0xb7, 0x19, 0xe0, 0x2e, 0x03, 0xbc, 0x68, 0x32, 0x08, 0xde, 0x0e, 0xdd,
	0xfd, 0x3f, 0x8a, 0x70, 0x84, 0xee, 0x61, 0xbc, 0xd4, 0xa2, 0x3c, 0x38, 0xe9, 0x40, 0x3f, 0x1c,
	0xa1, 0xa7, 0x7f, 0x9b, 0x7d, 0x2b, 0xb9, 0x20, 0x29, 0x7a, 0x75, 0xe0, 0xa6, 0x81, 0x37, 0x04,
	0xda, 0x7b, 0x84, 0x23, 0xb4, 0x80, 0xab, 0x6e, 0xc8, 0x47, 0xf1, 0xa3, 0x38, 0x61, 0xcc, 0x92,
	0xca, 0x9a, 0x2e, 0x35, 0xd1, 0x2c, 0xf9, 0xc4, 0x38, 0x55, 0xc7, 0x8c, 0x79, 0x80, 0xf3, 0x27,
	0x92, 0xe4, 0x34, 0xaa, 0x38, 0x3f, 0x4d, 0xaf, 0xf2, 0x23, 0xf4, 0x8f, 0x31, 0xbc, 0x4b, 0xc4,
	0x16, 0x8b, 0x3a, 0xc7, 0x49, 0xaa, 0xb0, 0x4a, 0x37, 0x38, 0x93, 0x65, 0x62, 0x69, 0x7d, 0xd5,
	0xe3, 0xcb, 0x7e, 0xa6, 0x51, 0x93, 0x4f, 0xe4, 0x7c, 0x1f, 0xfc, 0xa5, 0xab, 0x89, 0x09, 0xee,
	0xfd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x41, 0x98, 0x9e, 0xba, 0xd4, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArtifactPluginClient is the client API for ArtifactPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArtifactPluginClient interface {
	Manifest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ArtifactPluginManifest, error)
	Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ArtifactUpload(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error)
	ArtifactDownload(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error)
	ServeStaticFiles(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error)
	CachePull(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error)
	CachePush(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error)
}

type artifactPluginClient struct {
	cc *grpc.ClientConn
}

func NewArtifactPluginClient(cc *grpc.ClientConn) ArtifactPluginClient {
	return &artifactPluginClient{cc}
}

func (c *artifactPluginClient) Manifest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ArtifactPluginManifest, error) {
	out := new(ArtifactPluginManifest)
	err := c.cc.Invoke(ctx, "/artifactplugin.ArtifactPlugin/Manifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPluginClient) Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/artifactplugin.ArtifactPlugin/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPluginClient) ArtifactUpload(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/artifactplugin.ArtifactPlugin/ArtifactUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPluginClient) ArtifactDownload(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/artifactplugin.ArtifactPlugin/ArtifactDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPluginClient) ServeStaticFiles(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/artifactplugin.ArtifactPlugin/ServeStaticFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPluginClient) CachePull(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/artifactplugin.ArtifactPlugin/CachePull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPluginClient) CachePush(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/artifactplugin.ArtifactPlugin/CachePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactPluginServer is the server API for ArtifactPlugin service.
type ArtifactPluginServer interface {
	Manifest(context.Context, *empty.Empty) (*ArtifactPluginManifest, error)
	Stop(context.Context, *empty.Empty) (*empty.Empty, error)
	ArtifactUpload(context.Context, *Options) (*Result, error)
	ArtifactDownload(context.Context, *Options) (*Result, error)
	ServeStaticFiles(context.Context, *Options) (*Result, error)
	CachePull(context.Context, *Options) (*Result, error)
	CachePush(context.Context, *Options) (*Result, error)
}

func RegisterArtifactPluginServer(s *grpc.Server, srv ArtifactPluginServer) {
	s.RegisterService(&_ArtifactPlugin_serviceDesc, srv)
}

func _ArtifactPlugin_Manifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPluginServer).Manifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifactplugin.ArtifactPlugin/Manifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPluginServer).Manifest(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPlugin_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPluginServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifactplugin.ArtifactPlugin/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPluginServer).Stop(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPlugin_ArtifactUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPluginServer).ArtifactUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifactplugin.ArtifactPlugin/ArtifactUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPluginServer).ArtifactUpload(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPlugin_ArtifactDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPluginServer).ArtifactDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifactplugin.ArtifactPlugin/ArtifactDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPluginServer).ArtifactDownload(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPlugin_ServeStaticFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPluginServer).ServeStaticFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifactplugin.ArtifactPlugin/ServeStaticFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPluginServer).ServeStaticFiles(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPlugin_CachePull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPluginServer).CachePull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifactplugin.ArtifactPlugin/CachePull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPluginServer).CachePull(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPlugin_CachePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPluginServer).CachePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifactplugin.ArtifactPlugin/CachePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPluginServer).CachePush(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArtifactPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "artifactplugin.ArtifactPlugin",
	HandlerType: (*ArtifactPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Manifest",
			Handler:    _ArtifactPlugin_Manifest_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ArtifactPlugin_Stop_Handler,
		},
		{
			MethodName: "ArtifactUpload",
			Handler:    _ArtifactPlugin_ArtifactUpload_Handler,
		},
		{
			MethodName: "ArtifactDownload",
			Handler:    _ArtifactPlugin_ArtifactDownload_Handler,
		},
		{
			MethodName: "ServeStaticFiles",
			Handler:    _ArtifactPlugin_ServeStaticFiles_Handler,
		},
		{
			MethodName: "CachePull",
			Handler:    _ArtifactPlugin_CachePull_Handler,
		},
		{
			MethodName: "CachePush",
			Handler:    _ArtifactPlugin_CachePush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "artifactplugin.proto",
}
